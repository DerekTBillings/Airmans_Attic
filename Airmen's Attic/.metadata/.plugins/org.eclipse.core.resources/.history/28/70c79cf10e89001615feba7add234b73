package com.billings.jdbc.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.billings.jdbc.dto.Person;
import com.billings.jdbc.dto.RaffleItem;
import com.billings.jdbc.sql.RaffleAdminPageSQL;
import com.billings.utils.SQLStatementUtils;

public class RaffleAdminPageImpl implements RaffleAdminPageDAO {

	@Override
	public List<RaffleItem> getRaffleItems() {
		List<RaffleItem> raffleItems = null;
		
		ResultSet results = SQLStatementUtils.executeQueryAndReturnResultSet(
				RaffleAdminPageSQL.getRaffleItems);
		
		try {
			raffleItems = getRaffleItemsFromResults(results);
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			SQLStatementUtils.closeConnectionsWithResultSet();
		}
		
		return raffleItems;
	}

	private List<RaffleItem> getRaffleItemsFromResults(ResultSet results) throws SQLException {
		List<RaffleItem> raffleItems = new ArrayList<RaffleItem>();
		
		while(results.next()) {
			RaffleItem item = buildItemFromResults(results);
			raffleItems.add(item);
		}
		
		return raffleItems;
	}
	
	private RaffleItem buildItemFromResults(ResultSet results) throws SQLException {
		RaffleItem item = new RaffleItem();
		
		int raffleId = results.getInt("Raffle_Id");
		String name = results.getString("Name");
		String description = results.getString("Description");
		String type = results.getString("Type_Name");
		String status = results.getString("Status");
		Date dateIn = results.getDate("Date_In");
		Date raffleDate = results.getDate("Date_Raffled");
		Date dateToRaffle = results.getDate("Date_To_Raffle");
		
		LocalDate convertedDateIn = convertDateToLocalDate(dateIn);
		LocalDate convertedRaffleDate = convertDateToLocalDate(raffleDate);
		LocalDate convertedDateToRaffle = convertDateToLocalDate(dateToRaffle);
		
		item.setRaffleId(raffleId);
		item.setName(name);
		item.setDescription(description);
		item.setType(type);
		item.setStatus(status);
		item.setDateIn(convertedDateIn);
		item.setDateRaffled(convertedRaffleDate);
		item.setDateToRaffle(convertedDateToRaffle);
		
		return item;
	}
	
	

	@Override
	public List<Person> getPeopleInRaffleById(int raffleItemId) {
		List<Person> peopleInRaffle = new ArrayList<Person>();
		
		ResultSet results = SQLStatementUtils.executeQueryAndReturnResultSet(
			RaffleAdminPageSQL.getPeopleForRaffleItem);
		
		try {
			while(results.next()) {
				Person loadedPerson = buildPersonFromResults(results);
				peopleInRaffle.add(loadedPerson);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return peopleInRaffle;
	}
	
	private Person buildPersonFromResults(ResultSet results) throws SQLException {
		Person person = new Person();
		
		person.setPersonId(results.getInt("Person_Id"));
		person.setLastName(results.getString("Last_Name"));
		person.setFirstName(results.getString("First_Name"));
		person.setRank(results.getString("Rank"));
		person.setDependentStatus(results.getString("Dependent_Status"));
		person.setEmail(results.getString("Email_Address"));
		person.setWorkPhone(results.getString("Work_Phone"));
		person.setCellPhone(results.getString("Cell_Phone"));
		person.setOrganization(results.getString("Organization"));

		Date milExpDate = results.getDate("Military_Id_Exp_Date");
		Date birthDate = results.getDate("Birth_Date");
		
		LocalDate milExpLocal = convertDateToLocalDate(milExpDate);
		LocalDate birthLocal = convertDateToLocalDate(birthDate);
		
		person.setMilitaryIdExpirationDate(milExpLocal);
		person.setBirthDate(birthLocal);
		
		return person;
	}
	

}
